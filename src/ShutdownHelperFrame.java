/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.TimerTask;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Timer;
import javax.swing.JTextField;

/**
 *
 * @author Torben
 */
public class ShutdownHelperFrame extends javax.swing.JFrame {

    private Timer timer;
    
    /**
     * Creates new form DesktopHelperFrame
     */
    public ShutdownHelperFrame() {
        initComponents();
        jlTimeRemaining.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jbShutdown = new javax.swing.JButton();
        jbReboot = new javax.swing.JButton();
        jbLogOff = new javax.swing.JButton();
        jtfHours = new javax.swing.JTextField();
        jcbDelay = new javax.swing.JCheckBox();
        jbRebootWApps = new javax.swing.JButton();
        jbAbort = new javax.swing.JButton();
        jtfMinutes = new javax.swing.JTextField();
        jtfSeconds = new javax.swing.JTextField();
        jlTimeRemaining = new javax.swing.JLabel();
        jlTimer = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jbShutdown.setText("shutdown");
        jbShutdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbShutdownActionPerformed(evt);
            }
        });

        jbReboot.setText("reboot");
        jbReboot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRebootActionPerformed(evt);
            }
        });

        jbLogOff.setText("log off");
        jbLogOff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbLogOffActionPerformed(evt);
            }
        });

        jtfHours.setText("hours");
        jtfHours.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtfHoursFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfHoursFocusLost(evt);
            }
        });

        jcbDelay.setText("delay");

        jbRebootWApps.setText("reboot with apps");
        jbRebootWApps.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRebootWAppsActionPerformed(evt);
            }
        });

        jbAbort.setText("abort");
        jbAbort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAbortActionPerformed(evt);
            }
        });

        jtfMinutes.setText("minutes");
        jtfMinutes.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtfMinutesFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfMinutesFocusLost(evt);
            }
        });

        jtfSeconds.setText("seconds");
        jtfSeconds.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtfSecondsFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfSecondsFocusLost(evt);
            }
        });

        jlTimeRemaining.setText("time remaining");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jbShutdown)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jbReboot))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jcbDelay)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtfSeconds, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jtfHours, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jtfMinutes, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbLogOff)
                    .addComponent(jlTimeRemaining)
                    .addComponent(jlTimer))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jbRebootWApps, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbAbort, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbShutdown)
                    .addComponent(jbReboot)
                    .addComponent(jbLogOff)
                    .addComponent(jbRebootWApps))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbAbort, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jtfHours, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jcbDelay)
                            .addComponent(jlTimeRemaining))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtfMinutes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlTimer))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jtfSeconds, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbRebootActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRebootActionPerformed
        jbAction(1);
    }//GEN-LAST:event_jbRebootActionPerformed

    private void jbShutdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbShutdownActionPerformed
        jbAction(2);
    }//GEN-LAST:event_jbShutdownActionPerformed

    private void jbLogOffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbLogOffActionPerformed
        jbAction(3);
    }//GEN-LAST:event_jbLogOffActionPerformed

    private void jbRebootWAppsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRebootWAppsActionPerformed
        jbAction(4);
    }//GEN-LAST:event_jbRebootWAppsActionPerformed

    private void jbAbortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAbortActionPerformed
        jbAction(5);
    }//GEN-LAST:event_jbAbortActionPerformed

    private void jtfHoursFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfHoursFocusGained
        jtfHours.setName("jtfHours");
        jtfDeleteText(jtfHours);
    }//GEN-LAST:event_jtfHoursFocusGained

    private void jtfMinutesFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfMinutesFocusGained
        jtfMinutes.setName("jtfMinutes");
        jtfDeleteText(jtfMinutes);
    }//GEN-LAST:event_jtfMinutesFocusGained

    private void jtfSecondsFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfSecondsFocusGained
        jtfSeconds.setName("jtfSeconds");
        jtfDeleteText(jtfSeconds);
    }//GEN-LAST:event_jtfSecondsFocusGained

    private void jtfHoursFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfHoursFocusLost
        jtfParseInput(jtfHours);
    }//GEN-LAST:event_jtfHoursFocusLost

    private void jtfMinutesFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfMinutesFocusLost
        jtfParseInput(jtfMinutes);
    }//GEN-LAST:event_jtfMinutesFocusLost

    private void jtfSecondsFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfSecondsFocusLost
        jtfParseInput(jtfSeconds);
    }//GEN-LAST:event_jtfSecondsFocusLost

    private void jtfDeleteText(JTextField jtf){
        Pattern ptn = Pattern.compile("\\d+");
        //Loesche Text nur, falls keine einzige Ziffer im Textfeld steht
        if(! ptn.matcher(jtf.getText()).find()){
            jtf.setText("");
        }
    }
    
    private void jtfParseInput(JTextField jtf){
        //Falls Ziffern im Textfeld stehen, isoliere diese und zeige sie an
        //sonst zeige Standardtext an
        int input = getTFInput(jtf);
        if(input != 0){
            jtf.setText(Integer.toString(input));
        }else{
            jtf.setText(jtf.getName().substring(3).toLowerCase());
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ShutdownHelperFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ShutdownHelperFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ShutdownHelperFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ShutdownHelperFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ShutdownHelperFrame().setVisible(true);
            }
        });
    }
    
    private void jbAction(int type){
        int time = 0;
        String strCommand;
        String s;
        //Berechne Delay, falls angegeben
        if(jcbDelay.isSelected()){
            time += 60 * 60 * getTFInput(jtfHours);
            time += 60 * getTFInput(jtfMinutes);
            time += getTFInput(jtfSeconds);
        }
        switch(type){
            case 1:{
                //Reboot
                strCommand = "shutdown -r -t " + time;
                runTimer(time);
                jlTimeRemaining.setText("reboot in");
                jlTimeRemaining.setVisible(true);
                break;
            }
            case 2:{
                //Shutdown
                strCommand = "shutdown -s -t " + time;
                runTimer(time);
                jlTimeRemaining.setText("shutdown in");
                jlTimeRemaining.setVisible(true);
                break;
            }
            case 3:{
                //Log Off
                strCommand = "shutdown -l -t " + time;
                stopTimer();
                jlTimeRemaining.setText("log off can't be delayed");
                jlTimeRemaining.setVisible(true);
                break;
            }
            case 4:{
                //Reboot With Apps
                strCommand = "shutdown -g -t " + time;
                runTimer(time);
                jlTimeRemaining.setText("reboot with apps in");
                jlTimeRemaining.setVisible(true);
                break;
            }
            case 5:{
                //Abort
                strCommand = "shutdown -a";
                stopTimer();
                break;
            }
            default:{ 
                throw new IllegalArgumentException("Illegal type in ButtonAction: " + type);
            }
        }
        try{
            //Fuehre den geforderten Befehl aus
            Process p = Runtime.getRuntime().exec(strCommand);
            BufferedReader stdInput = new BufferedReader(
                    new InputStreamReader(p.getInputStream())
            );
            BufferedReader stdError = new BufferedReader(
                    new InputStreamReader(p.getErrorStream())
            );
            
            // read the output from the command
            System.out.println("Here is the standard output of the command:\n");
            while ((s = stdInput.readLine()) != null) {
                System.out.println(s);
            }
            
            // read any errors from the attempted command
            System.out.println("Here is the standard error of the command (if any):\n");
            while ((s = stdError.readLine()) != null) {
                System.out.println(s);
            }
        }catch(IOException ie){
            ie.printStackTrace();
        }
    }
    
    private int getTFInput(JTextField jtf){
        if(jtf == null){
            throw new IllegalArgumentException("TextField is null");
        }
        int input;
        String strTF = jtf.getText();
        Pattern pattern = Pattern.compile("\\d+");
        Matcher matcher = pattern.matcher(strTF);
        if(matcher.find()){
            input = Integer.parseInt(matcher.group());
            if(input < 0){
                input = -input;
            }
        }else{
            input = 0;
        }
        return input;
    }
    
    private void stopTimer(){
        if(timer != null){
            jlTimeRemaining.setText("timer stopped");
            timer.cancel();
            timer = null;
        }
    }
    
    private void runTimer(int time){
        //Starte den Timer
        if(timer == null && jcbDelay.isSelected()){
            timer = new Timer();
            timer.schedule(new LabelTimer(time), 0, 1000);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbAbort;
    private javax.swing.JButton jbLogOff;
    private javax.swing.JButton jbReboot;
    private javax.swing.JButton jbRebootWApps;
    private javax.swing.JButton jbShutdown;
    private javax.swing.JCheckBox jcbDelay;
    private javax.swing.JLabel jlTimeRemaining;
    private javax.swing.JLabel jlTimer;
    private javax.swing.JTextField jtfHours;
    private javax.swing.JTextField jtfMinutes;
    private javax.swing.JTextField jtfSeconds;
    // End of variables declaration//GEN-END:variables

    //Inner Class Timer: Aktualisiertt das TimerLabel jede Sekunde
    private class LabelTimer extends TimerTask{
        private int timerTime;
        public LabelTimer(int time){
            this.timerTime = time;
        }
        @Override
        public void run() {
            timerTime--;
            int remainder;
            int tHours = timerTime / 3600;
            remainder = timerTime - tHours * 3600;
            int tMinutes = remainder / 60;
            remainder -= tMinutes * 60;
            int tSeconds = remainder;
            
            jlTimer.setText(
                    tHours + ":" 
                    + ((tMinutes < 10) ? "0" + tMinutes : tMinutes) + ":" 
                    + ((tSeconds < 10) ? "0" + tSeconds : tSeconds)
            );
        }
    }
}